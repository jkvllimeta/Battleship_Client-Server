/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package battleship_sp;

import java.net.*;
import java.io.*;

/**
 *
 * @author Joseph
 */
public class Server {

    int sessionNo = 1;
    final int socket = 8000;

    public void start() {
        new Thread(() -> {
            try {
                ServerSocket serverSocket = new ServerSocket(socket);
                System.out.println("Server started at socket number: " + socket);

                while (true) {
                    System.out.println("Waiting for connections...");

                    Socket player1 = serverSocket.accept();
                    System.out.println("Player 1 has connected to the server at Session No. " + sessionNo);
                    System.out.println("Player 1 IP: " + player1.getInetAddress().getHostAddress());

                    new DataOutputStream(player1.getOutputStream()).writeInt(1);

                    Socket player2 = serverSocket.accept();
                    System.out.println("Player 2 has connected to the server at Session No. " + sessionNo);
                    System.out.println("Player 2 IP: " + player2.getInetAddress().getHostAddress());

                    new DataOutputStream(player1.getOutputStream()).writeInt(2);

                    new Thread(new SessionHandler(player1, player2)).start();

                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }).start();
    }

    public class SessionHandler implements Runnable {

        Socket p1Socket;
        Socket p2Socket;

        int p1Ammo = 10;
        int p2Ammo = 10;

        int p1Kill = 0;
        int p2Kill = 0;

        String[][] p1GameBoard = new String[8][8];
        String[][] p2GameBoard = new String[8][8];

        DataInputStream fromP1;
        DataInputStream fromP2;
        DataOutputStream toP1;
        DataOutputStream toP2;

        public SessionHandler(Socket p1Socket, Socket p2Socket) {
            this.p1Socket = p1Socket;
            this.p2Socket = p2Socket;

            try {

                for (int i = 0; i < this.p1GameBoard.length; i++) {
                    for (int j = 0; j < this.p1GameBoard[0].length; j++) {
                        this.p1GameBoard[i][j] = "w";
                    }
                }

                for (int i = 0; i < this.p2GameBoard.length; i++) {
                    for (int j = 0; j < this.p2GameBoard[0].length; j++) {
                        this.p2GameBoard[i][j] = "w";
                    }
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        public void run() {

            try {

                fromP1 = new DataInputStream(p1Socket.getInputStream());
                toP1 = new DataOutputStream(p1Socket.getOutputStream());
                fromP2 = new DataInputStream(p2Socket.getInputStream());
                toP2 = new DataOutputStream(p2Socket.getOutputStream());

                toP1.writeInt(1);

                System.out.println("Player 1: Place your Ship");
                placeShip(p1GameBoard, fromP1);
                printBoardStatus(p1GameBoard);

                System.out.println("Player 2: Place your Ship");
                placeShip(p2GameBoard, fromP2);
                printBoardStatus(p2GameBoard);

                while (true) {
                    System.out.println("Player 1: Choose panel to attack:");
                    attackShip(p2GameBoard, fromP1, p1Ammo, p1Kill);
                    gameCheck(p1Ammo, p1Kill);

                    System.out.println("Player 2: Choose panel to attack:");
                    attackShip(p2GameBoard, fromP2, p2Ammo, p1Kill);
                    gameCheck(p2Ammo, p2Kill);
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }

    public void placeShip(String[][] gameBoard, DataInputStream fromPlayer) {

        int rowPlace = 0;
        int colPlace = 0;

        try {

            do {
                System.out.println("Please enter a row (1-8) to place your ship on: ");
                rowPlace = fromPlayer.readInt() - 1;
            } while (rowPlace < 0 || rowPlace > 7);

            do {
                System.out.println("Please enter a column (1-8) to place your ship on: ");
                colPlace = fromPlayer.readInt() - 1;
            } while (colPlace < 0 || colPlace > 7);

            gameBoard[rowPlace][colPlace] = "B";

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void attackShip(String[][] enemyBoard, DataInputStream player, int ammunition, int kill) {

        System.out.println("Choose a space to attack.");
        System.out.println("Number of attacks left: " + ammunition);
        int rowAttack = 0;
        int colAttack = 0;

        try {
            do {
                System.out.println("Please enter a row (1-8): ");
                rowAttack = player.readInt() - 1;
            } while (rowAttack < 0 || rowAttack > 7);

            do {
                System.out.println("Please enter a column (1-8): ");
                colAttack = player.readInt() - 1;
            } while (colAttack < 0 || colAttack > 7);

            if (enemyBoard[rowAttack][colAttack] == "B") {
                kill++;
                System.out.println("You have sunk a battleship");
                enemyBoard[rowAttack][colAttack] = "K";
            } else {
                System.out.println("You missed! Try again!");
                enemyBoard[rowAttack][colAttack] = "X";
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        ammunition--;
    }

    public static void printBoardStatus(String[][] gameBoard) {

        for (int i = 0; i < gameBoard.length; i++) {
            for (int j = 0; j < gameBoard[0].length; j++) {
                System.out.print(gameBoard[i][j] + " ");
            }
            System.out.println("");
        }
    }

    public static void gameCheck(int attacks, int kill) {
        if (attacks == 0) {
            System.out.println("You are out of attacks. Restart the game.");
            System.exit(0);
        } else if (kill == 1) {
            System.out.println("You win the game!");
            System.exit(0);
        } else {
            System.out.println("Prepare for the next turn.");
        }
    }

}
